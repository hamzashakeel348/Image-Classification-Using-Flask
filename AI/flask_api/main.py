# -*- coding: utf-8 -*-
"""Copy of Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17SXG1f-57uO1l__l1wfb5qhHsshi8PDh
"""

from tensorflow import keras
from keras.models import model_from_json
import numpy as np
import os
import pickle
import cv2
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from keras.applications.inception_v3 import InceptionV3, preprocess_input

import pickle


def retrive_dictionary(name):
    a_file = open(name, "rb")
    output = pickle.load(a_file)
    return output


def get_key(val, my_dict):
    for key, value in my_dict.items():
        if val == value:
            return key
    return "key doesn't exist"


def retrive_model(modelJson, modelh5):
    json_file = open(modelJson, 'r')
    loaded_model_json = json_file.read()
    json_file.close()
    loaded_model = model_from_json(loaded_model_json)
    # load weights into new model
    loaded_model.load_weights(modelh5)
    print("Loaded model from disk")
    #loaded_model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
    return loaded_model


def retrive(model, my_image, dictionary):
    my_image = preprocess_input(my_image) * 1./255
    resize_image = cv2.resize(my_image, (75, 75))
    plt.imshow(resize_image*255, interpolation='nearest')
    resize_image = resize_image.reshape(
        1, resize_image.shape[0], resize_image.shape[1], resize_image.shape[2])
    output = np.argmax(model.predict(resize_image))
    return get_key(output, dictionary)


def initialize():

    #gender_dictionary= retrive_dictionary("/content/gdrive/MyDrive/AI/inception_gender.pkl")
    # gender_model=retrive_model('/content/gdrive/MyDrive/AI/inception_gender.json','/content/gdrive/MyDrive/AI/inception_gender.h5')

    usage_dictionary = retrive_dictionary(
        "/home/hamza/Desktop/AI/inception_usage.pkl")
    usage_model = retrive_model('/home/hamza/Desktop/AI/inception_usage.json',
                                '/home/hamza/Desktop/AI/inception_usage.h5')

    masterCategory_dictionary = retrive_dictionary(
        "/home/hamza/Desktop/AI/inception_masterCategory.pkl")
    masterCategory_model = retrive_model(
        '/home/hamza/Desktop/AI/inception_masterCategory.json', '/home/hamza/Desktop/AI/inception_masterCategory.h5')

    subCategory_dictionary = retrive_dictionary(
        "/home/hamza/Desktop/AI/inception_subCategory.pkl")
    subCategory_model = retrive_model(
        '/home/hamza/Desktop/AI/inception_subCategory.json', '/home/hamza/Desktop/AI/inception_subCategory.h5')

    articleType_dictionary = retrive_dictionary(
        "/home/hamza/Desktop/AI/inception_articleType.pkl")
    articleType_model = retrive_model(
        '/home/hamza/Desktop/AI/inception_articleType.json', '/home/hamza/Desktop/AI/inception_articleType.h5')
    return usage_dictionary, usage_model, masterCategory_dictionary, masterCategory_model, subCategory_dictionary, subCategory_model, articleType_dictionary, articleType_model


usage_dictionary, usage_model, masterCategory_dictionary, masterCategory_model, subCategory_dictionary, subCategory_model, articleType_dictionary, articleType_model = initialize()

# getLabels('img3.jpg')


def getLabels(filename):
    image = cv2.imread('upload/' + filename)
    list_of_labels = []

    list_of_labels.append(retrive(masterCategory_model,
                          image, masterCategory_dictionary))
    list_of_labels.append(
        retrive(subCategory_model, image, subCategory_dictionary))
    list_of_labels.append(
        retrive(articleType_model, image, articleType_dictionary))
    # list_of_labels.append(retrive(gender_model,image,gender_dictionary))
    list_of_labels.append(retrive(usage_model, image, usage_dictionary))
    return list(list_of_labels)
